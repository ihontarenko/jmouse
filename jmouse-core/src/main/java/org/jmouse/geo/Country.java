package org.jmouse.geo;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * üåç Country ‚Äî ISO 3166-1 dataset (–±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ {@code java.util.Locale}).
 *
 * <p>–§–æ—Ä–º–∞—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏: {@code XX("alpha2","alpha3","currency", callingCode, "English", "Local")}.</p>
 *
 * <p>–ü–æ—à—É–∫:
 * <ul>
 *   <li>{@link #ofIso2(String)} ‚Äî –∑–∞ ISO Œ±2 (UA, US, DE)</li>
 *   <li>{@link #ofIso3(String)} ‚Äî –∑–∞ ISO Œ±3 (UKR, USA, DEU)</li>
 *   <li>{@link #ofCallingCode(int)} ‚Äî –∑–∞ E.164 –∫–æ–¥–æ–º (380, 1, 44)</li>
 *   <li>{@link #ofCurrency(String)} ‚Äî –∑–∞ ISO-4217 (UAH, USD, EUR)</li>
 *   <li>{@link #ofName(String)} / {@link #ofLocalName(String)} ‚Äî –∑–∞ –Ω–∞–∑–≤–æ—é</li>
 *   <li>{@link #of(String)} ‚Äî "—Ä–æ–∑—É–º–Ω–∏–π" –ø–æ—à—É–∫: —Å–ø—Ä–æ–±—É—î Œ±2 ‚Üí Œ±3 ‚Üí –∞–Ω–≥–ª.–Ω–∞–∑–≤—É (—Ç–æ—á–Ω–∏–π –∑–±—ñ–≥)</li>
 * </ul>
 * </p>
 *
 * <p>‚ö†Ô∏è –ó–∞—É–≤–∞–≥–∞: {@link #ofCurrency(String)} –º–æ–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –∫—Ä–∞—ó–Ω (–Ω–∞–ø—Ä., EUR).</p>
 */
public enum Country {

    // Europe
    AL("AL","ALB","ALL",355,"Albania","Shqip√´ria"),
    AD("AD","AND","EUR",376,"Andorra","Andorra"),
    AT("AT","AUT","EUR",43,"Austria","√ñsterreich"),
    BY("BY","BLR","BYN",375,"Belarus","–ë–µ–ª–∞—Ä—É—Å—å"),
    BE("BE","BEL","EUR",32,"Belgium","Belgi√´"),
    BA("BA","BIH","BAM",387,"Bosnia and Herzegovina","Bosna i Hercegovina"),
    BG("BG","BGR","BGN",359,"Bulgaria","–ë—ä–ª–≥–∞—Ä–∏—è"),
    HR("HR","HRV","EUR",385,"Croatia","Hrvatska"),
    CY("CY","CYP","EUR",357,"Cyprus","ŒöœçœÄœÅŒøœÇ"),
    CZ("CZ","CZE","CZK",420,"Czechia","ƒåesko"),
    DK("DK","DNK","DKK",45,"Denmark","Danmark"),
    EE("EE","EST","EUR",372,"Estonia","Eesti"),
    FI("FI","FIN","EUR",358,"Finland","Suomi"),
    FR("FR","FRA","EUR",33,"France","France"),
    DE("DE","DEU","EUR",49,"Germany","Deutschland"),
    GR("GR","GRC","EUR",30,"Greece","ŒïŒªŒªŒ¨Œ¥Œ±"),
    HU("HU","HUN","HUF",36,"Hungary","Magyarorsz√°g"),
    IS("IS","ISL","ISK",354,"Iceland","√çsland"),
    IE("IE","IRL","EUR",353,"Ireland","√âire"),
    IT("IT","ITA","EUR",39,"Italy","Italia"),
    LV("LV","LVA","EUR",371,"Latvia","Latvija"),
    LI("LI","LIE","CHF",423,"Liechtenstein","Liechtenstein"),
    LT("LT","LTU","EUR",370,"Lithuania","Lietuva"),
    LU("LU","LUX","EUR",352,"Luxembourg","Luxembourg"),
    MT("MT","MLT","EUR",356,"Malta","Malta"),
    MD("MD","MDA","MDL",373,"Moldova","Republica Moldova"),
    MC("MC","MCO","EUR",377,"Monaco","Monaco"),
    ME("ME","MNE","EUR",382,"Montenegro","Crna Gora"),
    NL("NL","NLD","EUR",31,"Netherlands","Nederland"),
    MK("MK","MKD","MKD",389,"North Macedonia","–°–µ–≤–µ—Ä–Ω–∞ –ú–∞–∫–µ–¥–æ–Ω–∏—ò–∞"),
    NO("NO","NOR","NOK",47,"Norway","Norge"),
    PL("PL","POL","PLN",48,"Poland","Polska"),
    PT("PT","PRT","EUR",351,"Portugal","Portugal"),
    RO("RO","ROU","RON",40,"Romania","Rom√¢nia"),
    RU("RU","RUS","RUB",7,"Russia","–†–æ—Å—Å–∏—è"),
    SM("SM","SMR","EUR",378,"San Marino","San Marino"),
    RS("RS","SRB","RSD",381,"Serbia","–°—Ä–±–∏—ò–∞"),
    SK("SK","SVK","EUR",421,"Slovakia","Slovensko"),
    SI("SI","SVN","EUR",386,"Slovenia","Slovenija"),
    ES("ES","ESP","EUR",34,"Spain","Espa√±a"),
    SE("SE","SWE","SEK",46,"Sweden","Sverige"),
    CH("CH","CHE","CHF",41,"Switzerland","Schweiz"),
    TR("TR","TUR","TRY",90,"Turkey","T√ºrkiye"),
    UA("UA","UKR","UAH",380,"Ukraine","–£–∫—Ä–∞—ó–Ω–∞"),
    GB("GB","GBR","GBP",44,"United Kingdom","United Kingdom"),
    VA("VA","VAT","EUR",379,"Vatican City","Citt√† del Vaticano"),
    // Asia
    AF("AF","AFG","AFN",93,"Afghanistan","ÿßŸÅÿ∫ÿßŸÜÿ≥ÿ™ÿßŸÜ"),
    AM("AM","ARM","AMD",374,"Armenia","’Ä’°’µ’°’Ω’ø’°’∂"),
    AZ("AZ","AZE","AZN",994,"Azerbaijan","Az…ôrbaycan"),
    BH("BH","BHR","BHD",973,"Bahrain","ÿßŸÑÿ®ÿ≠ÿ±ŸäŸÜ"),
    BD("BD","BGD","BDT",880,"Bangladesh","‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂"),
    BT("BT","BTN","INR",975,"Bhutan","‡Ω†‡Ωñ‡æ≤‡Ω¥‡ΩÇ"),
    BN("BN","BRN","BND",673,"Brunei","Brunei"),
    KH("KH","KHM","KHR",855,"Cambodia","·ûÄ·ûò·üí·ûñ·ûª·ûá·û∂"),
    CN("CN","CHN","CNY",86,"China","‰∏≠ÂõΩ"),
    GE("GE","GEO","GEL",995,"Georgia","·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù"),
    IN("IN","IND","INR",91,"India","‡§≠‡§æ‡§∞‡§§"),
    ID("ID","IDN","IDR",62,"Indonesia","Indonesia"),
    IR("IR","IRN","IRR",98,"Iran","ÿß€åÿ±ÿßŸÜ"),
    IQ("IQ","IRQ","IQD",964,"Iraq","ÿßŸÑÿπÿ±ÿßŸÇ"),
    IL("IL","ISR","ILS",972,"Israel","◊ô◊©◊®◊ê◊ú"),
    JP("JP","JPN","JPY",81,"Japan","Êó•Êú¨"),
    JO("JO","JOR","JOD",962,"Jordan","ÿßŸÑÿ£ÿ±ÿØŸÜ"),
    KZ("KZ","KAZ","KZT",7,"Kazakhstan","“ö–∞–∑–∞“õ—Å—Ç–∞–Ω"),
    KW("KW","KWT","KWD",965,"Kuwait","ÿßŸÑŸÉŸàŸäÿ™"),
    KG("KG","KGZ","KGS",996,"Kyrgyzstan","–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"),
    LA("LA","LAO","LAK",856,"Laos","‡∫•‡∫≤‡∫ß"),
    LB("LB","LBN","LBP",961,"Lebanon","ŸÑÿ®ŸÜÿßŸÜ"),
    MY("MY","MYS","MYR",60,"Malaysia","Malaysia"),
    MV("MV","MDV","MVR",960,"Maldives","ﬁãﬁ®ﬁàﬁ¨ﬁÄﬁ®"),
    MN("MN","MNG","MNT",976,"Mongolia","–ú–æ–Ω–≥–æ–ª —É–ª—Å"),
    MM("MM","MMR","MMK",95,"Myanmar","·Äô·Äº·Äî·Ä∫·Äô·Ä¨"),
    NP("NP","NPL","NPR",977,"Nepal","‡§®‡•á‡§™‡§æ‡§≤"),
    KP("KP","PRK","KPW",850,"North Korea","Ï°∞ÏÑ†"),
    OM("OM","OMN","OMR",968,"Oman","ÿπŸÖÿßŸÜ"),
    PK("PK","PAK","PKR",92,"Pakistan","Ÿæÿß⁄©ÿ≥ÿ™ÿßŸÜ"),
    PS("PS","PSE","ILS",970,"Palestine","ŸÅŸÑÿ≥ÿ∑ŸäŸÜ"),
    PH("PH","PHL","PHP",63,"Philippines","Pilipinas"),
    QA("QA","QAT","QAR",974,"Qatar","ŸÇÿ∑ÿ±"),
    SA("SA","SAU","SAR",966,"Saudi Arabia","ÿßŸÑÿ≥ÿπŸàÿØŸäÿ©"),
    SG("SG","SGP","SGD",65,"Singapore","Singapore"),
    KR("KR","KOR","KRW",82,"South Korea","ÎåÄÌïúÎØºÍµ≠"),
    LK("LK","LKA","LKR",94,"Sri Lanka","‡∑Å‡∑ä‚Äç‡∂ª‡∑ì ‡∂Ω‡∂Ç‡∂ö‡∑è‡∑Ä"),
    SY("SY","SYR","SYP",963,"Syria","ÿ≥Ÿàÿ±Ÿäÿß"),
    TJ("TJ","TJK","TJS",992,"Tajikistan","–¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω"),
    TH("TH","THA","THB",66,"Thailand","‡πÑ‡∏ó‡∏¢"),
    TL("TL","TLS","USD",670,"Timor-Leste","Timor-Leste"),
    TM("TM","TKM","TMT",993,"Turkmenistan","T√ºrkmenistan"),
    AE("AE","ARE","AED",971,"United Arab Emirates","ÿßŸÑÿ•ŸÖÿßÿ±ÿßÿ™"),
    UZ("UZ","UZB","UZS",998,"Uzbekistan","O ªzbekiston"),
    VN("VN","VNM","VND",84,"Vietnam","Vi·ªát Nam"),
    YE("YE","YEM","YER",967,"Yemen","ÿßŸÑŸäŸÖŸÜ"),
    // Africa
    DZ("DZ","DZA","DZD",213,"Algeria","ÿßŸÑÿ¨ÿ≤ÿßÿ¶ÿ±"),
    AO("AO","AGO","AOA",244,"Angola","Angola"),
    BJ("BJ","BEN","XOF",229,"Benin","B√©nin"),
    BW("BW","BWA","BWP",267,"Botswana","Botswana"),
    BF("BF","BFA","XOF",226,"Burkina Faso","Burkina Faso"),
    BI("BI","BDI","BIF",257,"Burundi","Uburundi"),
    CV("CV","CPV","CVE",238,"Cabo Verde","Cabo Verde"),
    CM("CM","CMR","XAF",237,"Cameroon","Cameroun"),
    CF("CF","CAF","XAF",236,"Central African Republic","R√©publique centrafricaine"),
    TD("TD","TCD","XAF",235,"Chad","Tchad"),
    KM("KM","COM","KMF",269,"Comoros","ÿ¨ÿ≤ÿ± ÿßŸÑŸÇŸÖÿ±"),
    CD("CD","COD","CDF",243,"Congo (Democratic Republic)","R√©publique d√©mocratique du Congo"),
    CG("CG","COG","XAF",242,"Congo (Republic)","R√©publique du Congo"),
    CI("CI","CIV","XOF",225,"C√¥te d'Ivoire","C√¥te d‚ÄôIvoire"),
    DJ("DJ","DJI","DJF",253,"Djibouti","ÿ¨Ÿäÿ®Ÿàÿ™Ÿä"),
    EG("EG","EGY","EGP",20,"Egypt","ŸÖÿµÿ±"),
    GQ("GQ","GNQ","XAF",240,"Equatorial Guinea","Guinea Ecuatorial"),
    ER("ER","ERI","ERN",291,"Eritrea","·ä§·à≠·âµ·à´"),
    SZ("SZ","SWZ","SZL",268,"Eswatini","eSwatini"),
    ET("ET","ETH","ETB",251,"Ethiopia","·ä¢·âµ·ãÆ·åµ·ã´"),
    GA("GA","GAB","XAF",241,"Gabon","Gabon"),
    GM("GM","GMB","GMD",220,"Gambia","Gambia"),
    GH("GH","GHA","GHS",233,"Ghana","Ghana"),
    GN("GN","GIN","GNF",224,"Guinea","Guin√©e"),
    GW("GW","GNB","XOF",245,"Guinea-Bissau","Guin√©-Bissau"),
    KE("KE","KEN","KES",254,"Kenya","Kenya"),
    LS("LS","LSO","LSL",266,"Lesotho","Lesotho"),
    LR("LR","LBR","LRD",231,"Liberia","Liberia"),
    LY("LY","LBY","LYD",218,"Libya","ŸÑŸäÿ®Ÿäÿß"),
    MG("MG","MDG","MGA",261,"Madagascar","Madagasikara"),
    MW("MW","MWI","MWK",265,"Malawi","Malawi"),
    ML("ML","MLI","XOF",223,"Mali","Mali"),
    MR("MR","MRT","MRU",222,"Mauritania","ŸÖŸàÿ±Ÿäÿ™ÿßŸÜŸäÿß"),
    MU("MU","MUS","MUR",230,"Mauritius","Mauritius"),
    MA("MA","MAR","MAD",212,"Morocco","ÿßŸÑŸÖÿ∫ÿ±ÿ®"),
    MZ("MZ","MOZ","MZN",258,"Mozambique","Mo√ßambique"),
    NA("NA","NAM","NAD",264,"Namibia","Namibia"),
    NE("NE","NER","XOF",227,"Niger","Niger"),
    NG("NG","NGA","NGN",234,"Nigeria","Nigeria"),
    RW("RW","RWA","RWF",250,"Rwanda","Rwanda"),
    ST("ST","STP","STN",239,"S√£o Tom√© and Pr√≠ncipe","S√£o Tom√© e Pr√≠ncipe"),
    SN("SN","SEN","XOF",221,"Senegal","S√©n√©gal"),
    SC("SC","SYC","SCR",248,"Seychelles","Seychelles"),
    SL("SL","SLE","SLL",232,"Sierra Leone","Sierra Leone"),
    SO("SO","SOM","SOS",252,"Somalia","Soomaaliya"),
    ZA("ZA","ZAF","ZAR",27,"South Africa","South Africa"),
    SS("SS","SSD","SSP",211,"South Sudan","South Sudan"),
    SD("SD","SDN","SDG",249,"Sudan","ÿßŸÑÿ≥ŸàÿØÿßŸÜ"),
    TZ("TZ","TZA","TZS",255,"Tanzania","Tanzania"),
    TG("TG","TGO","XOF",228,"Togo","Togo"),
    TN("TN","TUN","TND",216,"Tunisia","ÿ™ŸàŸÜÿ≥"),
    UG("UG","UGA","UGX",256,"Uganda","Uganda"),
    ZM("ZM","ZMB","ZMW",260,"Zambia","Zambia"),
    ZW("ZW","ZWE","ZWL",263,"Zimbabwe","Zimbabwe"),
    // America
    AG("AG","ATG","XCD",1,"Antigua and Barbuda","Antigua and Barbuda"),
    AR("AR","ARG","ARS",54,"Argentina","Argentina"),
    BS("BS","BHS","BSD",1,"Bahamas","Bahamas"),
    BB("BB","BRB","BBD",1,"Barbados","Barbados"),
    BZ("BZ","BLZ","BZD",501,"Belize","Belize"),
    BO("BO","BOL","BOB",591,"Bolivia","Bolivia"),
    BR("BR","BRA","BRL",55,"Brazil","Brasil"),
    CA("CA","CAN","CAD",1,"Canada","Canada"),
    CL("CL","CHL","CLP",56,"Chile","Chile"),
    CO("CO","COL","COP",57,"Colombia","Colombia"),
    CR("CR","CRI","CRC",506,"Costa Rica","Costa Rica"),
    CU("CU","CUB","CUP",53,"Cuba","Cuba"),
    DM("DM","DMA","XCD",1,"Dominica","Dominica"),
    DO("DO","DOM","DOP",1,"Dominican Republic","Rep√∫blica Dominicana"),
    EC("EC","ECU","USD",593,"Ecuador","Ecuador"),
    SV("SV","SLV","USD",503,"El Salvador","El Salvador"),
    GD("GD","GRD","XCD",1,"Grenada","Grenada"),
    GT("GT","GTM","GTQ",502,"Guatemala","Guatemala"),
    GY("GY","GUY","GYD",592,"Guyana","Guyana"),
    HT("HT","HTI","HTG",509,"Haiti","Ha√Øti"),
    HN("HN","HND","HNL",504,"Honduras","Honduras"),
    JM("JM","JAM","JMD",1,"Jamaica","Jamaica"),
    MX("MX","MEX","MXN",52,"Mexico","M√©xico"),
    NI("NI","NIC","NIO",505,"Nicaragua","Nicaragua"),
    PA("PA","PAN","PAB",507,"Panama","Panam√°"),
    PY("PY","PRY","PYG",595,"Paraguay","Paraguay"),
    PE("PE","PER","PEN",51,"Peru","Per√∫"),
    KN("KN","KNA","XCD",1,"Saint Kitts and Nevis","Saint Kitts and Nevis"),
    LC("LC","LCA","XCD",1,"Saint Lucia","Saint Lucia"),
    VC("VC","VCT","XCD",1,"Saint Vincent and the Grenadines","Saint Vincent and the Grenadines"),
    SR("SR","SUR","SRD",597,"Suriname","Suriname"),
    TT("TT","TTO","TTD",1,"Trinidad and Tobago","Trinidad and Tobago"),
    US("US","USA","USD",1,"United States","United States"),
    UY("UY","URY","UYU",598,"Uruguay","Uruguay"),
    VE("VE","VEN","VES",58,"Venezuela","Venezuela"),
    //  Oceania
    AU("AU","AUS","AUD",61,"Australia","Australia"),
    FJ("FJ","FJI","FJD",679,"Fiji","Fiji"),
    KI("KI","KIR","AUD",686,"Kiribati","Kiribati"),
    MH("MH","MHL","USD",692,"Marshall Islands","Marshall Islands"),
    FM("FM","FSM","USD",691,"Micronesia","Micronesia"),
    NR("NR","NRU","AUD",674,"Nauru","Nauru"),
    NZ("NZ","NZL","NZD",64,"New Zealand","New Zealand"),
    PW("PW","PLW","USD",680,"Palau","Palau"),
    PG("PG","PNG","PGK",675,"Papua New Guinea","Papua New Guinea"),
    WS("WS","WSM","WST",685,"Samoa","Samoa"),
    SB("SB","SLB","SBD",677,"Solomon Islands","Solomon Islands"),
    TO("TO","TON","TOP",676,"Tonga","Tonga"),
    TV("TV","TUV","AUD",688,"Tuvalu","Tuvalu"),
    VU("VU","VUT","VUV",678,"Vanuatu","Vanuatu");

    private final String iso2Code;
    private final String iso3Code;
    private final String currency;    // ISO-4217
    private final int    callingCode; // E.164
    private final String englishName;
    private final String localName;

    Country(String iso2Code, String iso3Code, String currency, int callingCode, String name, String localName) {
        this.iso2Code = Objects.requireNonNull(iso2Code, "alpha2");
        this.iso3Code = Objects.requireNonNull(iso3Code, "iso3Code");
        this.currency = Objects.requireNonNull(currency, "currency");
        this.callingCode = callingCode;
        this.englishName = Objects.requireNonNull(name, "name");
        this.localName = Objects.requireNonNull(localName, "localName");
    }

    /** ISO 3166-1 alpha-2 (e.g., UA). */
    public String getIso2Code() { return iso2Code; }

    /** ISO 3166-1 alpha-3 (e.g., UKR). */
    public String getIso3Code() { return iso3Code; }

    /** ISO-4217 currency code (e.g., UAH). */
    public String getCurrency() { return currency; }

    /** E.164 calling code (e.g., 380). */
    public int getCallingCode() { return callingCode; }

    /** English country name (e.g., Ukraine). */
    public String getName() { return englishName; }

    /** Local name (e.g., –£–∫—Ä–∞—ó–Ω–∞). */
    public String getLocalName() { return localName; }

    // --------------------------
    // Indexes for fast lookups
    // --------------------------

    private static final Map<String, Country> ISO2_INDEX = Collections.unmodifiableMap(
            indexBy(Country::getIso2Code, false));

    private static final Map<String, Country> ISO3_INDEX = Collections.unmodifiableMap(
            indexBy(Country::getIso3Code, false));

    private static final Map<Integer, List<Country>> CALLING_CODE_INDEX = Collections.unmodifiableMap(
            Arrays.stream(values()).collect(Collectors.groupingBy(Country::getCallingCode)));

    private static final Map<String, List<Country>> CURRENCY_INDEX = Collections.unmodifiableMap(
            Arrays.stream(values()).collect(Collectors.groupingBy(c -> normalize(c.getCurrency()))));

    private static final Map<String, Country> ENGLISH_NAME_INDEX = Collections.unmodifiableMap(
            indexBy(Country::getName, true));

    private static final Map<String, Country> LOCAL_NAME_INDEX = Collections.unmodifiableMap(
            indexBy(Country::getLocalName, true));

    private static Map<String, Country> indexBy(Function<Country, String> getter, boolean caseInsensitive) {
        return Arrays.stream(values()).collect(
                Collectors.toMap(c -> caseInsensitive ? normalize(getter.apply(c)) : getter.apply(c),
                                 Function.identity(), (a, b) -> a, LinkedHashMap::new
                )
        );
    }

    private static String normalize(String string) {
        return string == null ? "" : string.trim().toUpperCase(Locale.ROOT);
    }

    // --------------------------
    // Lookup API
    // --------------------------

    /**
     * üîé Smart lookup: tries alpha-2 ‚Üí alpha-3 ‚Üí exact English name (case-insensitive).
     * <pre>
     * Country.of("UA")    -> UA
     * Country.of("UKR")   -> UA
     * Country.of("Ukraine")-> UA
     * Country.of("–£–∫—Ä–∞—ó–Ω–∞")-> UA
     * </pre>
     */
    public static Optional<Country> of(String any) {
        String            key      = normalize(any);
        Optional<Country> optional = ofIso2(key);

        if (optional.isPresent()) {
            return optional;
        }

        optional = ofIso3(key);
        if (optional.isPresent()) {
            return optional;
        }

        optional = ofName(key);
        if (optional.isPresent()) {
            return optional;
        }

        return ofLocalName(key);
    }

    /** üî§ Find by ISO alpha-2 (case-insensitive). */
    public static Optional<Country> ofIso2(String iso2) {
        return Optional.ofNullable(ISO2_INDEX.get(normalize(iso2)));
    }

    /** üî§ Find by ISO alpha-3 (case-insensitive). */
    public static Optional<Country> ofIso3(String iso3) {
        return Optional.ofNullable(ISO3_INDEX.get(normalize(iso3)));
    }

    /** ‚òéÔ∏è Countries with given E.164 calling code. */
    public static List<Country> ofCallingCode(int code) {
        return CALLING_CODE_INDEX.getOrDefault(code, List.of());
    }

    /** üí± Countries using the given ISO-4217 currency (case-insensitive). */
    public static List<Country> ofCurrency(String currency) {
        return CURRENCY_INDEX.getOrDefault(normalize(currency), List.of());
    }

    /** üá¨üáß Exact English name match (case-insensitive). */
    public static Optional<Country> ofName(String englishName) {
        return Optional.ofNullable(ENGLISH_NAME_INDEX.get(normalize(englishName)));
    }

    /** üè∑Ô∏è Exact local name match (case-insensitive). */
    public static Optional<Country> ofLocalName(String localName) {
        if (localName == null) return Optional.empty();
        return Optional.ofNullable(LOCAL_NAME_INDEX.get(normalize(localName)));
    }

    /** Returns immutable list of all countries (stable order). */
    public static List<Country> list() {
        return List.of(values());
    }

    @Override
    public String toString() {
        return iso2Code + "(" + iso2Code + "," + iso3Code + "," + currency + "," + callingCode + "," + englishName + "," + localName + ")";
    }
}
